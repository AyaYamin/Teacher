{"ast":null,"code":"/*\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from \"@material-ui/core/Button\";\n\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { FormWithConstraints, FieldFeedbacks, Async, FieldFeedback } from 'react-form-with-constraints';\n\nimport 'views/UserProfile/style.css';\n\nimport { DisplayFields } from 'react-form-with-constraints-tools';\nfunction postData(url, data) {\n    // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            // \"Content-Type\": \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n        .then(response => response.text()); // parses response to JSON\n}\n\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// See https://en.wikipedia.org/wiki/List_of_the_most_common_passwords\nconst isACommonPassword = async (password: string) => {\n    console.log('isACommonPassword');\n    await sleep(1000);\n    return [\n        '123456',\n        'password',\n        '12345678',\n        'qwerty',\n        '12345',\n        '123456789',\n        'letmein',\n        '1234567',\n        'football',\n        'iloveyou',\n        'admin',\n        'welcome',\n        'monkey',\n        'login',\n        'abc123'\n    ].includes(password.toLowerCase());\n};\n\ninterface Props { }\n\ninterface State {\n    email: string;\n    password: string;\n    passwordConfirm: string;\n    signUpButtonDisabled: boolean;\n}\n\nexport default class Form extends React.Component<Props, State> {\n   \n    form: FormWithConstraints | null = null;\n    password: HTMLInputElement | null = null;\n\n    state: State = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        signUpButtonDisabled: false,\n\n    };\n\n    handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const target = e.target;\n\n        // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\n        // @ts-ignore\n        this.setState({\n            [target.name as keyof State]: target.value\n        });\n\n        // Validates only the given field and returns the related FieldValidation structures\n        const fields = await this.form!.validateFields(target);\n\n        const fieldIsValid = fields.every(fieldFeedbacksValidation => fieldFeedbacksValidation.isValid());\n        if (fieldIsValid) console.log(`Field '${target.name}' is valid`);\n        else console.log(`Field '${target.name}' is invalid`);\n\n        if (this.form!.isValid()) console.log('The form is valid');\n        else console.log('The form is invalid');\n\n        this.setState({ signUpButtonDisabled: !this.form!.isValid() });\n    }\n\n    handlePasswordChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const target = e.target;\n\n        // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\n        // @ts-ignore\n        this.setState({\n            [target.name as keyof State]: target.value\n        });\n\n        const fields = await this.form!.validateFields(target, 'passwordConfirm');\n\n        const fieldsAreValid = fields.every(field => field.isValid());\n        if (fieldsAreValid) console.log(`Fields '${target.name}' and 'passwordConfirm' are valid`);\n        else console.log(`Fields '${target.name}' and/or 'passwordConfirm' are invalid`);\n\n        if (this.form!.isValid()) console.log('The form is valid');\n        else console.log('The form is invalid');\n\n        this.setState({ signUpButtonDisabled: !this.form!.isValid() });\n    }\n    resetPass = (event) => {\n        event.preventDefault();\n        console.log(this.state);\n        postData(`http://localhost/test_project-master (4)/test_project-master/src/views/UserProfile/Edit1.php`, this.state)\n            .then(data => console.log(JSON.stringify(data)))\n            .catch(error => console.error(error));\n        //  alert(`Updated Successfully ^_^`)\n\n\n        return (\n            <div>\n\n                <h4 color=\"primary\">Updated Successfuly</h4> :\n          <span> </span>\n            </div>\n\n        )\n    }\n    handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        \n        event.preventDefault();\n\n        // Validates the non-dirty fields and returns the related FieldValidation structures\n        const fields = await this.form!.validateForm();\n\n        // or simply use this.form.isValid()\n        const formIsValid = fields.every(field => field.isValid());\n\n        if (formIsValid) console.log('The form is valid');\n        else console.log('The form is invalid');\n\n        this.setState({ signUpButtonDisabled: !formIsValid });\n\n        if (formIsValid) {\n            alert(`Valid form\\n\\nthis.state =\\n${JSON.stringify(this.state, null, 2)}`);\n        }\n\n        postData(`http://localhost/test_project-master (4)/test_project-master/src/views/UserProfile/Edit1.php`, this.state)\n            .then(data => console.log(JSON.stringify(data)))\n            .catch(error => console.error(error));\n        // alert(`Updated Successfully ^_^`)\n       // this.myFormRef.reset(); \n     // event.target.reset();\n        return (\n            <div>\n                <h4>Updated Successfuly</h4>\n            </div>\n        )\n    }\n\n    render() {\n        const styleInput = {\n            width: \"150%\",\n            alignContent: \"Center\",\n            height: \"20px\",\n            margin: \"3px 0\",\n            border: \"1px solid #000\",\n            borderBottomLeftRadius: \"10px\",\n            borderBottomRightRadius: \"10px\",\n            borderTopRightRadius: \"10px\",\n            borderTopLeftRadius: \"10px\",\n\n        };\n        return (\n            <FormWithConstraints action=\"Edit1.php\" ref={formWithConstraints => this.form = formWithConstraints}\n          style={{ alignContent: \"Center\" }} onSubmit={this.handleSubmit} noValidate>\n          <form  style={{ alignContent: \"Center\" }} id=\"myForm\">\n                <div style={{ alignContent: \"Center\" }}>\n\n                    <InputLabel htmlFor=\"email\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>ID</b></InputLabel>\n                    <input type=\"number\" name=\"id\" id=\"id\" style={styleInput} required onChange={this.handleChange} />\n                    <br/>\n\n                    <InputLabel htmlFor=\"email\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>Current Password</b></InputLabel>\n                    <input type=\"password\" name=\"email\" id=\"email\" style={styleInput}\n                        value={this.state.email} onChange={this.handleChange}\n                        required minLength={5} />\n                    <FieldFeedbacks for=\"email\">\n                        <FieldFeedback when=\"tooShort\"><b>Too short</b></FieldFeedback>\n                        <FieldFeedback when=\"*\" />\n                        <FieldFeedback when=\"valid\"><b>Looks good!</b></FieldFeedback>\n                    </FieldFeedbacks>\n                </div>\n\n                <div>\n                    <InputLabel htmlFor=\"password\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>NEW Password</b></InputLabel>\n                    <input type=\"password\" name=\"password\" id=\"password\" style={styleInput}\n                        ref={password => this.password = password}\n                        value={this.state.password} onChange={this.handlePasswordChange}\n                        required pattern=\".{5,}\" />\n                    <FieldFeedbacks for=\"password\">\n                        <FieldFeedback when=\"valueMissing\" />\n                        <FieldFeedback when=\"patternMismatch\"><b>Should be at least 5 characters long</b></FieldFeedback>\n                        <FieldFeedback when={value => !/\\d/.test(value)} warning ><b>Should contain numbers</b> </FieldFeedback>\n                        <FieldFeedback when={value => !/[a-z]/.test(value)} warning><b>Should contain small letters</b></FieldFeedback>\n                        <FieldFeedback when={value => !/[A-Z]/.test(value)} warning><b>Should contain capital letters</b></FieldFeedback>\n                        <FieldFeedback when={value => !/\\W/.test(value)} warning><b>Should contain special characters</b></FieldFeedback>\n                        <Async\n                            promise={isACommonPassword}\n                            pending={<span style={{ display: 'block' }}>...</span>}\n                            then={commonPassword => commonPassword ?\n                                <FieldFeedback warning><b>This password is very common</b></FieldFeedback> : null\n                            }\n                        />\n                        <FieldFeedback when=\"valid\"><b>Looks good!</b></FieldFeedback>\n                    </FieldFeedbacks>\n                </div>\n\n                <div>\n                    <InputLabel htmlFor=\"password-confirm\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>Confirm Password</b></InputLabel>\n                    <input type=\"password\" name=\"passwordConfirm\" id=\"password-confirm\" style={styleInput}\n                        value={this.state.passwordConfirm} onChange={this.handleChange} />\n                    <FieldFeedbacks for=\"passwordConfirm\">\n                        <FieldFeedback when={value => value !== this.password!.value}><b>Not the same password</b></FieldFeedback>\n                    </FieldFeedbacks>\n                </div>\n\n\n                <Button disabled={this.state.signUpButtonDisabled} style={{ color: \"#000548\", background: \"#2196f3\" }} name=\"UpdateProfile\" type=\"submit\" value=\"UpdateProfile\">Update </Button>\n\n                </form>\n            </FormWithConstraints>\n        );\n    }\n}\n*/\n//ReactDOM.render(<Form />, document.getElementById('app'));","map":{"version":3,"sources":["C:\\xampp\\htdocs\\test_project-master (4)\\test_project-master\\src\\views\\UserProfile\\form.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA","sourcesContent":["/*\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from \"@material-ui/core/Button\";\n\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { FormWithConstraints, FieldFeedbacks, Async, FieldFeedback } from 'react-form-with-constraints';\n\nimport 'views/UserProfile/style.css';\n\nimport { DisplayFields } from 'react-form-with-constraints-tools';\nfunction postData(url, data) {\n    // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            // \"Content-Type\": \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n        .then(response => response.text()); // parses response to JSON\n}\n\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// See https://en.wikipedia.org/wiki/List_of_the_most_common_passwords\nconst isACommonPassword = async (password: string) => {\n    console.log('isACommonPassword');\n    await sleep(1000);\n    return [\n        '123456',\n        'password',\n        '12345678',\n        'qwerty',\n        '12345',\n        '123456789',\n        'letmein',\n        '1234567',\n        'football',\n        'iloveyou',\n        'admin',\n        'welcome',\n        'monkey',\n        'login',\n        'abc123'\n    ].includes(password.toLowerCase());\n};\n\ninterface Props { }\n\ninterface State {\n    email: string;\n    password: string;\n    passwordConfirm: string;\n    signUpButtonDisabled: boolean;\n}\n\nexport default class Form extends React.Component<Props, State> {\n   \n    form: FormWithConstraints | null = null;\n    password: HTMLInputElement | null = null;\n\n    state: State = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        signUpButtonDisabled: false,\n\n    };\n\n    handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const target = e.target;\n\n        // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\n        // @ts-ignore\n        this.setState({\n            [target.name as keyof State]: target.value\n        });\n\n        // Validates only the given field and returns the related FieldValidation structures\n        const fields = await this.form!.validateFields(target);\n\n        const fieldIsValid = fields.every(fieldFeedbacksValidation => fieldFeedbacksValidation.isValid());\n        if (fieldIsValid) console.log(`Field '${target.name}' is valid`);\n        else console.log(`Field '${target.name}' is invalid`);\n\n        if (this.form!.isValid()) console.log('The form is valid');\n        else console.log('The form is invalid');\n\n        this.setState({ signUpButtonDisabled: !this.form!.isValid() });\n    }\n\n    handlePasswordChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const target = e.target;\n\n        // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\n        // @ts-ignore\n        this.setState({\n            [target.name as keyof State]: target.value\n        });\n\n        const fields = await this.form!.validateFields(target, 'passwordConfirm');\n\n        const fieldsAreValid = fields.every(field => field.isValid());\n        if (fieldsAreValid) console.log(`Fields '${target.name}' and 'passwordConfirm' are valid`);\n        else console.log(`Fields '${target.name}' and/or 'passwordConfirm' are invalid`);\n\n        if (this.form!.isValid()) console.log('The form is valid');\n        else console.log('The form is invalid');\n\n        this.setState({ signUpButtonDisabled: !this.form!.isValid() });\n    }\n    resetPass = (event) => {\n        event.preventDefault();\n        console.log(this.state);\n        postData(`http://localhost/test_project-master (4)/test_project-master/src/views/UserProfile/Edit1.php`, this.state)\n            .then(data => console.log(JSON.stringify(data)))\n            .catch(error => console.error(error));\n        //  alert(`Updated Successfully ^_^`)\n\n\n        return (\n            <div>\n\n                <h4 color=\"primary\">Updated Successfuly</h4> :\n          <span> </span>\n            </div>\n\n        )\n    }\n    handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        \n        event.preventDefault();\n\n        // Validates the non-dirty fields and returns the related FieldValidation structures\n        const fields = await this.form!.validateForm();\n\n        // or simply use this.form.isValid()\n        const formIsValid = fields.every(field => field.isValid());\n\n        if (formIsValid) console.log('The form is valid');\n        else console.log('The form is invalid');\n\n        this.setState({ signUpButtonDisabled: !formIsValid });\n\n        if (formIsValid) {\n            alert(`Valid form\\n\\nthis.state =\\n${JSON.stringify(this.state, null, 2)}`);\n        }\n\n        postData(`http://localhost/test_project-master (4)/test_project-master/src/views/UserProfile/Edit1.php`, this.state)\n            .then(data => console.log(JSON.stringify(data)))\n            .catch(error => console.error(error));\n        // alert(`Updated Successfully ^_^`)\n       // this.myFormRef.reset(); \n     // event.target.reset();\n        return (\n            <div>\n                <h4>Updated Successfuly</h4>\n            </div>\n        )\n    }\n\n    render() {\n        const styleInput = {\n            width: \"150%\",\n            alignContent: \"Center\",\n            height: \"20px\",\n            margin: \"3px 0\",\n            border: \"1px solid #000\",\n            borderBottomLeftRadius: \"10px\",\n            borderBottomRightRadius: \"10px\",\n            borderTopRightRadius: \"10px\",\n            borderTopLeftRadius: \"10px\",\n\n        };\n        return (\n            <FormWithConstraints action=\"Edit1.php\" ref={formWithConstraints => this.form = formWithConstraints}\n          style={{ alignContent: \"Center\" }} onSubmit={this.handleSubmit} noValidate>\n          <form  style={{ alignContent: \"Center\" }} id=\"myForm\">\n                <div style={{ alignContent: \"Center\" }}>\n\n                    <InputLabel htmlFor=\"email\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>ID</b></InputLabel>\n                    <input type=\"number\" name=\"id\" id=\"id\" style={styleInput} required onChange={this.handleChange} />\n                    <br/>\n\n                    <InputLabel htmlFor=\"email\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>Current Password</b></InputLabel>\n                    <input type=\"password\" name=\"email\" id=\"email\" style={styleInput}\n                        value={this.state.email} onChange={this.handleChange}\n                        required minLength={5} />\n                    <FieldFeedbacks for=\"email\">\n                        <FieldFeedback when=\"tooShort\"><b>Too short</b></FieldFeedback>\n                        <FieldFeedback when=\"*\" />\n                        <FieldFeedback when=\"valid\"><b>Looks good!</b></FieldFeedback>\n                    </FieldFeedbacks>\n                </div>\n\n                <div>\n                    <InputLabel htmlFor=\"password\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>NEW Password</b></InputLabel>\n                    <input type=\"password\" name=\"password\" id=\"password\" style={styleInput}\n                        ref={password => this.password = password}\n                        value={this.state.password} onChange={this.handlePasswordChange}\n                        required pattern=\".{5,}\" />\n                    <FieldFeedbacks for=\"password\">\n                        <FieldFeedback when=\"valueMissing\" />\n                        <FieldFeedback when=\"patternMismatch\"><b>Should be at least 5 characters long</b></FieldFeedback>\n                        <FieldFeedback when={value => !/\\d/.test(value)} warning ><b>Should contain numbers</b> </FieldFeedback>\n                        <FieldFeedback when={value => !/[a-z]/.test(value)} warning><b>Should contain small letters</b></FieldFeedback>\n                        <FieldFeedback when={value => !/[A-Z]/.test(value)} warning><b>Should contain capital letters</b></FieldFeedback>\n                        <FieldFeedback when={value => !/\\W/.test(value)} warning><b>Should contain special characters</b></FieldFeedback>\n                        <Async\n                            promise={isACommonPassword}\n                            pending={<span style={{ display: 'block' }}>...</span>}\n                            then={commonPassword => commonPassword ?\n                                <FieldFeedback warning><b>This password is very common</b></FieldFeedback> : null\n                            }\n                        />\n                        <FieldFeedback when=\"valid\"><b>Looks good!</b></FieldFeedback>\n                    </FieldFeedbacks>\n                </div>\n\n                <div>\n                    <InputLabel htmlFor=\"password-confirm\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>Confirm Password</b></InputLabel>\n                    <input type=\"password\" name=\"passwordConfirm\" id=\"password-confirm\" style={styleInput}\n                        value={this.state.passwordConfirm} onChange={this.handleChange} />\n                    <FieldFeedbacks for=\"passwordConfirm\">\n                        <FieldFeedback when={value => value !== this.password!.value}><b>Not the same password</b></FieldFeedback>\n                    </FieldFeedbacks>\n                </div>\n\n\n                <Button disabled={this.state.signUpButtonDisabled} style={{ color: \"#000548\", background: \"#2196f3\" }} name=\"UpdateProfile\" type=\"submit\" value=\"UpdateProfile\">Update </Button>\n\n                </form>\n            </FormWithConstraints>\n        );\n    }\n}\n*/\n//ReactDOM.render(<Form />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}